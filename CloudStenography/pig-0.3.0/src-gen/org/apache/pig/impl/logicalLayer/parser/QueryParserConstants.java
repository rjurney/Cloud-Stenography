/* Generated By:JJTree&JavaCC: Do not edit this line. QueryParserConstants.java */
package org.apache.pig.impl.logicalLayer.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QueryParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STRFILTEROP = 7;
  /** RegularExpression Id. */
  int NUMFILTEROP = 8;
  /** RegularExpression Id. */
  int FILTEROP = 9;
  /** RegularExpression Id. */
  int DEFINE = 10;
  /** RegularExpression Id. */
  int LOAD = 11;
  /** RegularExpression Id. */
  int FILTER = 12;
  /** RegularExpression Id. */
  int FOREACH = 13;
  /** RegularExpression Id. */
  int MATCHES = 14;
  /** RegularExpression Id. */
  int ORDER = 15;
  /** RegularExpression Id. */
  int ARRANGE = 16;
  /** RegularExpression Id. */
  int DISTINCT = 17;
  /** RegularExpression Id. */
  int COGROUP = 18;
  /** RegularExpression Id. */
  int JOIN = 19;
  /** RegularExpression Id. */
  int CROSS = 20;
  /** RegularExpression Id. */
  int UNION = 21;
  /** RegularExpression Id. */
  int SPLIT = 22;
  /** RegularExpression Id. */
  int INTO = 23;
  /** RegularExpression Id. */
  int IF = 24;
  /** RegularExpression Id. */
  int ALL = 25;
  /** RegularExpression Id. */
  int ANY = 26;
  /** RegularExpression Id. */
  int AS = 27;
  /** RegularExpression Id. */
  int BY = 28;
  /** RegularExpression Id. */
  int USING = 29;
  /** RegularExpression Id. */
  int INNER = 30;
  /** RegularExpression Id. */
  int OUTER = 31;
  /** RegularExpression Id. */
  int STAR = 32;
  /** RegularExpression Id. */
  int PARALLEL = 33;
  /** RegularExpression Id. */
  int GROUP = 34;
  /** RegularExpression Id. */
  int AND = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int NOT = 37;
  /** RegularExpression Id. */
  int GENERATE = 38;
  /** RegularExpression Id. */
  int FLATTEN = 39;
  /** RegularExpression Id. */
  int EVAL = 40;
  /** RegularExpression Id. */
  int ASC = 41;
  /** RegularExpression Id. */
  int DESC = 42;
  /** RegularExpression Id. */
  int INT = 43;
  /** RegularExpression Id. */
  int LONG = 44;
  /** RegularExpression Id. */
  int FLOAT = 45;
  /** RegularExpression Id. */
  int DOUBLE = 46;
  /** RegularExpression Id. */
  int CHARARRAY = 47;
  /** RegularExpression Id. */
  int BYTEARRAY = 48;
  /** RegularExpression Id. */
  int BAG = 49;
  /** RegularExpression Id. */
  int TUPLE = 50;
  /** RegularExpression Id. */
  int MAP = 51;
  /** RegularExpression Id. */
  int IS = 52;
  /** RegularExpression Id. */
  int NULL = 53;
  /** RegularExpression Id. */
  int STREAM = 54;
  /** RegularExpression Id. */
  int THROUGH = 55;
  /** RegularExpression Id. */
  int STORE = 56;
  /** RegularExpression Id. */
  int SHIP = 57;
  /** RegularExpression Id. */
  int CACHE = 58;
  /** RegularExpression Id. */
  int INPUT = 59;
  /** RegularExpression Id. */
  int OUTPUT = 60;
  /** RegularExpression Id. */
  int ERROR = 61;
  /** RegularExpression Id. */
  int STDIN = 62;
  /** RegularExpression Id. */
  int STDOUT = 63;
  /** RegularExpression Id. */
  int LIMIT = 64;
  /** RegularExpression Id. */
  int SAMPLE = 65;
  /** RegularExpression Id. */
  int LETTER = 66;
  /** RegularExpression Id. */
  int DIGIT = 67;
  /** RegularExpression Id. */
  int SPECIALCHAR = 68;
  /** RegularExpression Id. */
  int FSSPECIALCHAR = 69;
  /** RegularExpression Id. */
  int IDENTIFIER = 70;
  /** RegularExpression Id. */
  int FLOATINGPOINT = 71;
  /** RegularExpression Id. */
  int INTEGER = 72;
  /** RegularExpression Id. */
  int LONGINTEGER = 73;
  /** RegularExpression Id. */
  int DOUBLENUMBER = 74;
  /** RegularExpression Id. */
  int FLOATNUMBER = 75;
  /** RegularExpression Id. */
  int QUOTEDSTRING = 76;
  /** RegularExpression Id. */
  int EXECCOMMAND = 77;
  /** RegularExpression Id. */
  int DOLLARVAR = 78;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<STRFILTEROP>",
    "<NUMFILTEROP>",
    "<FILTEROP>",
    "\"define\"",
    "\"load\"",
    "\"filter\"",
    "\"foreach\"",
    "\"matches\"",
    "\"order\"",
    "\"arrange\"",
    "\"distinct\"",
    "\"cogroup\"",
    "\"join\"",
    "\"cross\"",
    "\"union\"",
    "\"split\"",
    "\"into\"",
    "\"if\"",
    "\"all\"",
    "\"any\"",
    "\"as\"",
    "\"by\"",
    "\"using\"",
    "\"inner\"",
    "\"outer\"",
    "\"*\"",
    "\"parallel\"",
    "\"group\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"generate\"",
    "\"flatten\"",
    "\"eval\"",
    "\"asc\"",
    "\"desc\"",
    "\"int\"",
    "\"long\"",
    "\"float\"",
    "\"double\"",
    "\"chararray\"",
    "\"bytearray\"",
    "\"bag\"",
    "\"tuple\"",
    "\"map\"",
    "\"is\"",
    "\"null\"",
    "\"stream\"",
    "\"through\"",
    "\"store\"",
    "\"ship\"",
    "\"cache\"",
    "\"input\"",
    "\"output\"",
    "\"stderr\"",
    "\"stdin\"",
    "\"stdout\"",
    "\"limit\"",
    "\"sample\"",
    "<LETTER>",
    "<DIGIT>",
    "<SPECIALCHAR>",
    "<FSSPECIALCHAR>",
    "<IDENTIFIER>",
    "<FLOATINGPOINT>",
    "<INTEGER>",
    "<LONGINTEGER>",
    "<DOUBLENUMBER>",
    "<FLOATNUMBER>",
    "<QUOTEDSTRING>",
    "<EXECCOMMAND>",
    "<DOLLARVAR>",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\"\\\"replicated\\\"\"",
    "\"\\\"repl\\\"\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"%\"",
    "\"#\"",
    "\"?\"",
    "\":\"",
    "\"[\"",
    "\"]\"",
    "\"$\"",
  };

}
