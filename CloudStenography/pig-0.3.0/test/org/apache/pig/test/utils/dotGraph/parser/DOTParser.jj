/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DOTParser.jj */
/*@egen*/options {
  // Generate non-static functions
  STATIC = false;
  // Case is ignored in keywords
  IGNORE_CASE = true;
}

PARSER_BEGIN(DOTParser)

package org.apache.pig.test.utils.dotGraph.parser ;

import java.util.*;
import java.io.*;
import org.apache.pig.test.utils.dotGraph.* ;

public class DOTParser/*@bgen(jjtree)*/implements DOTParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTDOTParserState jjtree = new JJTDOTParserState();

/*@egen*/

    static String unquote(String s) {
        return s.substring(1, s.length()-1);
    }
    
    static class DotState {
        public Map<String,String> nodeAttributes = new HashMap<String,String>() ;
        public Map<String,String> edgeAttributes = new HashMap<String,String>() ;
    }

}

PARSER_END(DOTParser)

// Skip all the new lines, tabs and spaces
SKIP : { " " |	"\r" |	"\t" |	"\n" }

MORE :
{
  "//" : SINGLE_COMMENT
  |
  "#" : SINGLE_COMMENT
  |
  "/*" : MULTI_COMMENT
}

<MULTI_COMMENT> SPECIAL_TOKEN  :
{
	<("\n" | "\r" | "\r\n")>
	|
	<"*/"> : DEFAULT
}

<SINGLE_COMMENT> SPECIAL_TOKEN :
{
  < ("\n" | "\r" | "\r\n") > : DEFAULT
}

<MULTI_COMMENT> MORE :
{
	< ~[] >
}

<SINGLE_COMMENT> MORE :
{
	< ~[] >
}


TOKEN:
{

      <LPAREN : "{">
    | <RPAREN : "}">
    | <LSQBRACKET: "[">
    | <RSQBRACKET: "]">
    | <EQUAL: "=">
    | <COMMA: ",">
    | <SEMICOLON: ";">
    | <DIRECTED_EDGE: "->">
    | <EDGE: "edge">
    | <NODE: "node">
    | <GRAPH: "graph">
    | <DIGRAPH : "digraph">
    | <#LETTER : ["a"-"z", "A"-"Z"] >
    | <#DIGIT : ["0"-"9"] >
    | <#SPECIAL_CHAR : "_" | "$" >
    | <NAME :  <LETTER> ( <LETTER> | <DIGIT> | <SPECIAL_CHAR> )* >
    | <QUOTEDSTRING : "\"" (~["\""])* "\"">
}


DotGraph Parse() :
{/*@bgen(jjtree) Parse */
    SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    DotGraph dotGraph = null ;
    DotState dotState = new DotState() ;
	Token graphName ;
}
{/*@bgen(jjtree) Parse */
        try {
/*@egen*/
	(
		<DIGRAPH>
		graphName = <NAME> { dotGraph = new DotGraph(graphName.image) ; }
		<LPAREN>

		(  LOOKAHEAD(2)
		     EdgeStatement(dotGraph, dotState)
		   | NodeStatement(dotGraph, dotState)
		   | AttributeStatement(dotGraph, dotState)
		)+

		<RPAREN>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return dotGraph ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AttributeStatement(DotGraph dotGraph, DotState dotState) :
{/*@bgen(jjtree) AttributeStatement */
    SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Map<String,String> attributes ;
}
{/*@bgen(jjtree) AttributeStatement */
    try {
/*@egen*/
    (
      ( <EDGE> attributes = AttributeList() { dotState.edgeAttributes = attributes ; } )
    | ( <NODE> attributes = AttributeList() { dotState.nodeAttributes = attributes ; } )
    | ( <GRAPH> attributes = AttributeList() { dotGraph.attributes = attributes ; } )
    )
    <SEMICOLON>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NodeStatement(DotGraph dotGraph, DotState dotState) :
{/*@bgen(jjtree) NodeStatement */
    SimpleNode jjtn000 = new SimpleNode(JJTNODESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token nodeName ;
    DotNode node = new DotNode() ;
    Map<String,String> attributes ;
}
{/*@bgen(jjtree) NodeStatement */
    try {
/*@egen*/
    nodeName = <NAME> { node.name = nodeName.image ; }
    ( attributes = AttributeList()  {
                                        node.attributes = new HashMap<String,String>() ;
                                        if (dotState != null) {
                                            node.attributes.putAll(dotState.nodeAttributes) ;
                                        }
                                        node.attributes.putAll(attributes) ;
                                    }
    )?
    <SEMICOLON>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { dotGraph.nodes.add(node) ; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EdgeStatement(DotGraph dotGraph, DotState dotState) :
{/*@bgen(jjtree) EdgeStatement */
    SimpleNode jjtn000 = new SimpleNode(JJTEDGESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token nodeName1 ;
    Token nodeName2 ;
    String startingNode ;
    DotNode node = new DotNode() ;
    Map<String,String> attributes ;
}
{/*@bgen(jjtree) EdgeStatement */
    try {
/*@egen*/
    nodeName1 = <NAME> { startingNode = nodeName1.image ; }
    (
     <DIRECTED_EDGE>
     nodeName2 = <NAME>
     {
        DotEdge edge = new DotEdge() ;
        edge.fromNode = startingNode ;
        edge.toNode = nodeName2.image ;

        dotGraph.edges.add(edge) ;

        startingNode = nodeName2.image ;
     }
    )+
    <SEMICOLON>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

Map<String,String> AttributeList() :
{/*@bgen(jjtree) AttributeList */
    SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTELIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Map<String,String> attributes = new HashMap<String,String>() ;
    String[] keyValuePair ;
}
{/*@bgen(jjtree) AttributeList */
    try {
/*@egen*/
    (
    <LSQBRACKET>
    (keyValuePair = Attribute() { attributes.put(keyValuePair[0], keyValuePair[1]) ; }  )
        (
            <COMMA>
            (keyValuePair = Attribute() { attributes.put(keyValuePair[0], keyValuePair[1]) ; }  )
        )*
    <RSQBRACKET>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return attributes ; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String[] Attribute() :
{/*@bgen(jjtree) Attribute */
    SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token attName ;
    Token value ;
    String[] keyValuePair = new String[2] ;
}
{/*@bgen(jjtree) Attribute */
    try {
/*@egen*/
    (
    attName = <NAME> { keyValuePair[0] = attName.image ; }
    <EQUAL>
    value = <QUOTEDSTRING> { keyValuePair[1] = unquote(value.image) ; }
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return keyValuePair ; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}