/* Generated By:JJTree&JavaCC: Do not edit this line. DOTParser.java */
package org.apache.pig.test.utils.dotGraph.parser ;

import java.util.*;
import java.io.*;
import org.apache.pig.test.utils.dotGraph.* ;

public class DOTParser/*@bgen(jjtree)*/implements DOTParserTreeConstants, DOTParserConstants {/*@bgen(jjtree)*/
  protected JJTDOTParserState jjtree = new JJTDOTParserState();
    static String unquote(String s) {
        return s.substring(1, s.length()-1);
    }

    static class DotState {
        public Map<String,String> nodeAttributes = new HashMap<String,String>() ;
        public Map<String,String> edgeAttributes = new HashMap<String,String>() ;
    }

  final public DotGraph Parse() throws ParseException {
 /*@bgen(jjtree) Parse */
    SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);DotGraph dotGraph = null ;
    DotState dotState = new DotState() ;
        Token graphName ;
    try {
      jj_consume_token(DIGRAPH);
      graphName = jj_consume_token(NAME);
                                     dotGraph = new DotGraph(graphName.image) ;
      jj_consume_token(LPAREN);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          EdgeStatement(dotGraph, dotState);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAME:
            NodeStatement(dotGraph, dotState);
            break;
          case EDGE:
          case NODE:
          case GRAPH:
            AttributeStatement(dotGraph, dotState);
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EDGE:
        case NODE:
        case GRAPH:
        case NAME:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return dotGraph ;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void AttributeStatement(DotGraph dotGraph, DotState dotState) throws ParseException {
 /*@bgen(jjtree) AttributeStatement */
    SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Map<String,String> attributes ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EDGE:
        jj_consume_token(EDGE);
        attributes = AttributeList();
                                              dotState.edgeAttributes = attributes ;
        break;
      case NODE:
        jj_consume_token(NODE);
        attributes = AttributeList();
                                              dotState.nodeAttributes = attributes ;
        break;
      case GRAPH:
        jj_consume_token(GRAPH);
        attributes = AttributeList();
                                               dotGraph.attributes = attributes ;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NodeStatement(DotGraph dotGraph, DotState dotState) throws ParseException {
 /*@bgen(jjtree) NodeStatement */
    SimpleNode jjtn000 = new SimpleNode(JJTNODESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token nodeName ;
    DotNode node = new DotNode() ;
    Map<String,String> attributes ;
    try {
      nodeName = jj_consume_token(NAME);
                        node.name = nodeName.image ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQBRACKET:
        attributes = AttributeList();
                                        node.attributes = new HashMap<String,String>() ;
                                        if (dotState != null) {
                                            node.attributes.putAll(dotState.nodeAttributes) ;
                                        }
                                        node.attributes.putAll(attributes) ;
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      dotGraph.nodes.add(node) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EdgeStatement(DotGraph dotGraph, DotState dotState) throws ParseException {
 /*@bgen(jjtree) EdgeStatement */
    SimpleNode jjtn000 = new SimpleNode(JJTEDGESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token nodeName1 ;
    Token nodeName2 ;
    String startingNode ;
    DotNode node = new DotNode() ;
    Map<String,String> attributes ;
    try {
      nodeName1 = jj_consume_token(NAME);
                         startingNode = nodeName1.image ;
      label_2:
      while (true) {
        jj_consume_token(DIRECTED_EDGE);
        nodeName2 = jj_consume_token(NAME);
        DotEdge edge = new DotEdge() ;
        edge.fromNode = startingNode ;
        edge.toNode = nodeName2.image ;

        dotGraph.edges.add(edge) ;

        startingNode = nodeName2.image ;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIRECTED_EDGE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Map<String,String> AttributeList() throws ParseException {
 /*@bgen(jjtree) AttributeList */
    SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTELIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Map<String,String> attributes = new HashMap<String,String>() ;
    String[] keyValuePair ;
    try {
      jj_consume_token(LSQBRACKET);
      keyValuePair = Attribute();
                                  attributes.put(keyValuePair[0], keyValuePair[1]) ;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        keyValuePair = Attribute();
                                          attributes.put(keyValuePair[0], keyValuePair[1]) ;
      }
      jj_consume_token(RSQBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return attributes ;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] Attribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
    SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token attName ;
    Token value ;
    String[] keyValuePair = new String[2] ;
    try {
      attName = jj_consume_token(NAME);
                       keyValuePair[0] = attName.image ;
      jj_consume_token(EQUAL);
      value = jj_consume_token(QUOTEDSTRING);
                             keyValuePair[1] = unquote(value.image) ;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return keyValuePair ;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(DIRECTED_EDGE)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    if (jj_3R_5()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DOTParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10e00000,0x10e00000,0xe00000,0x8000,0x100000,0x40000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DOTParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DOTParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DOTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DOTParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DOTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DOTParser(DOTParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DOTParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
